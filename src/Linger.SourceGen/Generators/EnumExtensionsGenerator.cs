using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Linger.SourceGen;

[Generator(LanguageNames.CSharp)]
public sealed class EnumExtensionsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var candidates = context.SyntaxProvider
            .CreateSyntaxProvider(
                static (node, _) => node is EnumDeclarationSyntax ed && ed.AttributeLists.Count > 0,
                static (ctx, _) => GetTarget(ctx))
            .Where(static m => m is not null)!;

        var compilationAndEnums = context.CompilationProvider.Combine(candidates.Collect());

    context.RegisterSourceOutput(compilationAndEnums, static (spc, tuple) =>
        {
            var (compilation, symbols) = tuple;
            if (symbols.IsDefaultOrEmpty)
                return;

            INamedTypeSymbol? marker = compilation.GetTypeByMetadataName("Linger.SourceGen.GenerateEnumExtensionsAttribute");
            INamedTypeSymbol? displayAttr = compilation.GetTypeByMetadataName("System.ComponentModel.DataAnnotations.DisplayAttribute");
            INamedTypeSymbol? descriptionAttr = compilation.GetTypeByMetadataName(typeof(DescriptionAttribute).FullName!);

            foreach (var symbol in symbols.Distinct(SymbolEqualityComparer.Default).OfType<INamedTypeSymbol>())
            {
                if (marker is null)
                    continue;
                if (!symbol.GetAttributes().Any(a => SymbolEqualityComparer.Default.Equals(a.AttributeClass, marker)))
                    continue;

                GenerateForEnum(spc, symbol, displayAttr, descriptionAttr);
            }
        });
    }

    private static INamedTypeSymbol? GetTarget(GeneratorSyntaxContext ctx)
    {
        var ed = (EnumDeclarationSyntax)ctx.Node;
        var model = ctx.SemanticModel;
        var symbol = model.GetDeclaredSymbol(ed) as INamedTypeSymbol;
        return symbol;
    }

    private static void GenerateForEnum(SourceProductionContext spc, INamedTypeSymbol enumSymbol, INamedTypeSymbol? displayAttr, INamedTypeSymbol? descriptionAttr)
    {
        try
        {
            string ns = enumSymbol.ContainingNamespace.IsGlobalNamespace ? "" : enumSymbol.ContainingNamespace.ToDisplayString();
            string enumName = enumSymbol.Name;
            var members = enumSymbol.GetMembers().OfType<IFieldSymbol>().Where(f => f.HasConstantValue).ToArray();

            if (members.Length == 0)
            {
                spc.ReportDiagnostic(Diagnostic.Create(
                    new DiagnosticDescriptor("LSG001", "Empty enum", "Enum {0} has no members", "SourceGen", DiagnosticSeverity.Warning, true),
                    enumSymbol.Locations.FirstOrDefault(), enumName));
                return;
            }

            EmitEnumExtensions(spc, ns, enumName, members, displayAttr, descriptionAttr);
        }
        catch (Exception ex)
        {
            spc.ReportDiagnostic(Diagnostic.Create(
                new DiagnosticDescriptor("LSG002", "Generation failed", "Failed to generate for {0}: {1}", "SourceGen", DiagnosticSeverity.Error, true),
                enumSymbol.Locations.FirstOrDefault(), enumSymbol.Name, ex.Message));
        }
    }

    private static void EmitEnumExtensions(SourceProductionContext spc, string ns, string enumName, IFieldSymbol[] members, INamedTypeSymbol? displayAttr, INamedTypeSymbol? descriptionAttr)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/> ");
        if (!string.IsNullOrEmpty(ns))
        {
            sb.Append("namespace ").Append(ns).AppendLine(";");
            sb.AppendLine();
        }
        sb.Append("public static class ").Append(enumName).AppendLine("Extensions");
        sb.AppendLine("{");
        // Maps
        sb.AppendLine("    private static readonly global::System.Collections.Generic.Dictionary<string, "+enumName+"> s_nameToValue = new(global::System.StringComparer.OrdinalIgnoreCase)");
        sb.AppendLine("    {");
        foreach (var m in members)
        {
            sb.Append("        { \"").Append(m.Name).Append("\", ")
              .Append(enumName).Append('.').Append(m.Name).AppendLine(" },");
        }
        sb.AppendLine("    };");

        sb.AppendLine("    private static readonly global::System.Collections.Generic.Dictionary<"+enumName+", string> s_valueToName = new()");
        sb.AppendLine("    {");
        foreach (var m in members)
        {
            sb.Append("        { ").Append(enumName).Append('.').Append(m.Name)
              .Append(", \"").Append(m.Name).AppendLine("\" },");
        }
        sb.AppendLine("    };");

        // Display map with fallback: Display.Name -> Description.Description -> Name
        sb.AppendLine("    private static readonly global::System.Collections.Generic.Dictionary<"+enumName+", string> s_valueToDisplay = new()");
        sb.AppendLine("    {");
        foreach (var m in members)
        {
            string display = GetDisplayText(m, displayAttr, descriptionAttr) ?? m.Name;
            sb.Append("        { ").Append(enumName).Append('.').Append(m.Name)
              .Append(", \"").Append(Escape(display)).AppendLine("\" },");
        }
        sb.AppendLine("    };");

    // Extensions
        sb.AppendLine("    public static bool TryGet(this string name, out "+enumName+" value)");
        sb.AppendLine("    {");
        sb.AppendLine("        if (string.IsNullOrEmpty(name)) { value = default; return false; }");
        sb.AppendLine("        return s_nameToValue.TryGetValue(name, out value);");
        sb.AppendLine("    }");

        sb.AppendLine("    public static bool TryGet(this int intValue, out "+enumName+" value)");
        sb.AppendLine("    {");
        sb.AppendLine("        value = ("+enumName+")intValue;");
        sb.AppendLine("        return s_valueToName.ContainsKey(value);");
        sb.AppendLine("    }");

        sb.AppendLine("    public static "+enumName+" FromInt(int intValue)");
        sb.AppendLine("    {");
        sb.AppendLine("        var v = ("+enumName+")intValue;");
        sb.AppendLine("        if (!s_valueToName.ContainsKey(v)) throw new global::System.ArgumentOutOfRangeException(nameof(intValue));");
        sb.AppendLine("        return v;");
        sb.AppendLine("    }");

        sb.AppendLine("    public static string GetName(this "+enumName+" value) => s_valueToName[value];");
        sb.AppendLine("    public static string GetDisplayName(this "+enumName+" value) => s_valueToDisplay[value];");
    sb.AppendLine("    public static global::System.Collections.Generic.IReadOnlyDictionary<"+enumName+", string> GetDisplayMap() => s_valueToDisplay;");

    // Registration to central registry for runtime preference
    sb.AppendLine();
    sb.AppendLine("    static "+enumName+"Extensions()");
    sb.AppendLine("    {");
    sb.AppendLine("        Linger.Enums.EnumGeneratedRegistry.Register<"+enumName+">(new Linger.Enums.EnumGeneratedRegistry.Provider");
    sb.AppendLine("        {");
    sb.AppendLine("            TryGetByName = static (string name) => s_nameToValue.TryGetValue(name, out var v) ? (true, (object)v) : (false, null),");
    sb.AppendLine("            TryGetByInt = static (int i) => { var v = ("+enumName+")i; return s_valueToName.ContainsKey(v) ? (true, (object)v) : (false, null); },");
    sb.AppendLine("            GetName = static (object o) => s_valueToName[("+enumName+")o],");
    sb.AppendLine("            GetDisplayName = static (object o) => s_valueToDisplay[("+enumName+")o]");
    sb.AppendLine("        });");
    sb.AppendLine("    }");

        sb.AppendLine("}");

        spc.AddSource(enumName+".EnumExtensions.g.cs", sb.ToString());
    }

    private static string? GetDisplayText(IFieldSymbol member, INamedTypeSymbol? displayAttr, INamedTypeSymbol? descriptionAttr)
    {
        if (displayAttr is not null)
        {
            var disp = member.GetAttributes().FirstOrDefault(a => SymbolEqualityComparer.Default.Equals(a.AttributeClass, displayAttr));
            if (disp is not null)
            {
                foreach (var arg in disp.NamedArguments)
                {
                    if (arg.Key == "Name" && arg.Value.Value is string s && !string.IsNullOrEmpty(s))
                        return s;
                }
            }
        }

        if (descriptionAttr is not null)
        {
            var desc = member.GetAttributes().FirstOrDefault(a => SymbolEqualityComparer.Default.Equals(a.AttributeClass, descriptionAttr));
            if (desc is { ConstructorArguments.Length: 1 })
            {
                var val = desc.ConstructorArguments[0].Value as string;
                if (!string.IsNullOrEmpty(val))
                    return val;
            }
        }
        return null;
    }

    private static string Escape(string s) => s.Replace("\\", "\\\\").Replace("\"", "\\\"");
}
