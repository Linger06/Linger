@using Microsoft.AspNetCore.Components.Routing
@inherits LayoutComponentBase
@inject AppState AppState
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<MudLayout>
    <AuthorizeView>
        <Authorized>
            <MudAppBar Elevation="1">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudText Typo="Typo.h6" Class="ml-3">Linger</MudText>
                <MudSpacer />
                <FullScreenToggleButton OnFullScreenChanged="OnFullScreenChanged" />
                <DarkModeToggleButton IsDarkMode="_isDarkMode" OnToggle="DarkModeToggle" />

                <MudText Typo="Typo.body1" Class="mr-4">æ¬¢è¿Ž, @context.User.Identity?.Name</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Logout">æ³¨é”€</MudButton>
            </MudAppBar>

            <MudDrawer id="nav-drawer" @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Linger</MudText>
                </MudDrawerHeader>
                <MudNavMenu>
                    <NavMenu />
                </MudNavMenu>
            </MudDrawer>
        </Authorized>
    </AuthorizeView>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">ðŸ—™</span>
</div>

@code {
    private bool _drawerOpen = false;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private void OnFullScreenChanged(bool isFullScreen)
    {
        // Do layout adjustment or logging here
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/login", true);
    }

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}
